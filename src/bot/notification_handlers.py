"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
"""
import logging
from datetime import time
from typing import Optional, Dict

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from src.storage.database import get_session
from src.services.notifications import NotificationService
from src.storage.models import NotificationSettings
from src.utils.logger import get_logger
from src.utils.bot_helpers import fix_user_id
from src.utils.languages import get_text, get_language

logger = get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
router = Router()

# –ú–∞–ø–ø–∏–Ω–≥ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
TIMEZONE_MAPPING: Dict[str, str] = {
    "UTC+2": "Europe/Kiev",
    "UTC+3": "Europe/Moscow",
    "UTC+4": "Asia/Baku",
    "UTC+5": "Asia/Tashkent",
    "UTC+6": "Asia/Almaty",
    "UTC+7": "Asia/Bangkok",
    "UTC+8": "Asia/Shanghai",
    "UTC+9": "Asia/Tokyo"
}

# –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
TIMEZONE_DISPLAY: Dict[str, str] = {v: k for k, v in TIMEZONE_MAPPING.items()}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    waiting_for_time = State()

def build_notification_keyboard(enabled: bool = True) -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
    
    Args:
        enabled: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
    builder.button(
        text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å" if enabled else "üîî –í–∫–ª—é—á–∏—Ç—å",
        callback_data=f"notifications:{'disable' if enabled else 'enable'}"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    builder.button(
        text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è",
        callback_data="notifications:set_time"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    builder.button(
        text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
        callback_data="notifications:set_timezone"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    builder.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="menu:main"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ 2x2
    builder.adjust(2)
    return builder

def build_timezone_keyboard() -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.
    
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    """
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
    for display_name, tz_name in TIMEZONE_MAPPING.items():
        builder.button(
            text=display_name,
            callback_data=f"timezone:{tz_name}"
        )
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    builder.button(
        text="üîô –û—Ç–º–µ–Ω–∞",
        callback_data="timezone:cancel"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ —Ä—è–¥
    builder.adjust(2)
    return builder

@router.message(Command("notifications"))
async def cmd_notifications(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notifications.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    user_id = await fix_user_id(message.from_user.id)
    session = get_session()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_service = NotificationService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = session.query(NotificationSettings).filter_by(user_id=user_id).first()
        
        if not settings:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            settings = await notification_service.create_user_notifications(
                user_id,
                time(10, 0),  # 10:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                "UTC"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if settings.enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
        notification_time = settings.notification_time.strftime("%H:%M")
        
        message_text = (
            f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {notification_time}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.timezone}\n\n"
            f"–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        types_map = {
            'daily_stats': '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            'campaigns': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö',
            'budget_alerts': '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ'
        }
        
        for type_key, type_name in types_map.items():
            enabled = settings.notification_types.get(type_key, True)
            status_icon = "‚úÖ" if enabled else "‚ùå"
            message_text += f"‚Ä¢ {type_name}: {status_icon}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            message_text,
            reply_markup=build_notification_keyboard(settings.enabled).as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in notifications command: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()

@router.callback_query(F.data.startswith("notifications:"))
async def notification_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
    
    Args:
        callback: –û–±—ä–µ–∫—Ç callback query
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    action = callback.data.split(":")[1]
    user_id = await fix_user_id(callback.from_user.id)
    session = get_session()
    
    try:
        notification_service = NotificationService(session)
        
        if action == "enable":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            current_settings = session.query(NotificationSettings).filter_by(user_id=user_id).first()
            
            # –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            settings = await notification_service.create_user_notifications(
                user_id,
                current_settings.notification_time if current_settings else time(10, 0),
                current_settings.timezone if current_settings else "UTC",
                enabled=True,
                notification_types=current_settings.notification_types if current_settings else None
            )
            await callback.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
            
        elif action == "disable":
            # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await notification_service.disable_notifications(user_id)
            await callback.answer("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            
        elif action == "set_time":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            await state.set_state(NotificationStates.waiting_for_time)
            await callback.message.edit_text(
                "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 10:00"
            )
            return
            
        elif action == "set_timezone":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            await callback.message.edit_text(
                "üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥:",
                reply_markup=build_timezone_keyboard().as_markup()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings = session.query(NotificationSettings).filter_by(user_id=user_id).first()
        status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if settings.enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
        notification_time = settings.notification_time.strftime("%H:%M")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        timezone_display = TIMEZONE_DISPLAY.get(settings.timezone, settings.timezone)
        
        message_text = (
            f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {notification_time}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_display}\n\n"
            f"–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        )
        
        types_map = {
            'daily_stats': '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            'campaigns': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö',
            'budget_alerts': '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ'
        }
        
        for type_key, type_name in types_map.items():
            enabled = settings.notification_types.get(type_key, True)
            status_icon = "‚úÖ" if enabled else "‚ùå"
            message_text += f"‚Ä¢ {type_name}: {status_icon}\n"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=build_notification_keyboard(settings.enabled).as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in notification callback: {str(e)}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )
    finally:
        session.close()

@router.callback_query(F.data.startswith("timezone:"))
async def timezone_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.
    """
    action = callback.data.split(":")[1]
    user_id = await fix_user_id(callback.from_user.id)
    session = get_session()
    
    try:
        if action == "cancel":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            settings = session.query(NotificationSettings).filter_by(user_id=user_id).first()
            if settings:
                status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if settings.enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
                notification_time = settings.notification_time.strftime("%H:%M")
                timezone_display = TIMEZONE_DISPLAY.get(settings.timezone, settings.timezone)
                
                message_text = (
                    f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {notification_time}\n"
                    f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_display}\n\n"
                    f"–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
                )
                
                types_map = {
                    'daily_stats': '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    'campaigns': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö',
                    'budget_alerts': '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ'
                }
                
                for type_key, type_name in types_map.items():
                    enabled = settings.notification_types.get(type_key, True)
                    status_icon = "‚úÖ" if enabled else "‚ùå"
                    message_text += f"‚Ä¢ {type_name}: {status_icon}\n"
                
                await callback.message.edit_text(
                    message_text,
                    reply_markup=build_notification_keyboard(settings.enabled).as_markup(),
                    parse_mode="HTML"
                )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = session.query(NotificationSettings).filter_by(user_id=user_id).first()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        notification_service = NotificationService(session)
        settings = await notification_service.create_user_notifications(
            user_id,
            settings.notification_time if settings else time(10, 0),
            action,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            settings.enabled if settings else True,
            settings.notification_types if settings else None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if settings.enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
        timezone_display = TIMEZONE_DISPLAY.get(settings.timezone, settings.timezone)
        
        message_text = (
            f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {settings.notification_time.strftime('%H:%M')}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_display}\n\n"
            f"–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        )
        
        types_map = {
            'daily_stats': '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            'campaigns': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö',
            'budget_alerts': '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ'
        }
        
        for type_key, type_name in types_map.items():
            enabled = settings.notification_types.get(type_key, True)
            status_icon = "‚úÖ" if enabled else "‚ùå"
            message_text += f"‚Ä¢ {type_name}: {status_icon}\n"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=build_notification_keyboard(settings.enabled).as_markup(),
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error in timezone callback: {str(e)}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )
    finally:
        session.close()

@router.message(NotificationStates.waiting_for_time)
async def process_notification_time(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    user_id = await fix_user_id(message.from_user.id)
    session = get_session()
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        hours, minutes = map(int, message.text.split(":"))
        notification_time = time(hours, minutes)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            raise ValueError("Invalid time format")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = session.query(NotificationSettings).filter_by(user_id=user_id).first()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        notification_service = NotificationService(session)
        settings = await notification_service.create_user_notifications(
            user_id,
            notification_time,
            settings.timezone if settings else "UTC",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ UTC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            settings.enabled if settings else True,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ True –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            settings.notification_types if settings else None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ None –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if settings.enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
        timezone_display = TIMEZONE_DISPLAY.get(settings.timezone, settings.timezone)
        
        message_text = (
            f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {notification_time.strftime('%H:%M')}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_display}\n\n"
            f"–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        )
        
        types_map = {
            'daily_stats': '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            'campaigns': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–ø–∞–Ω–∏—è—Ö',
            'budget_alerts': '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ'
        }
        
        for type_key, type_name in types_map.items():
            enabled = settings.notification_types.get(type_key, True)
            status_icon = "‚úÖ" if enabled else "‚ùå"
            message_text += f"‚Ä¢ {type_name}: {status_icon}\n"
        
        await message.answer(
            message_text,
            reply_markup=build_notification_keyboard(settings.enabled).as_markup(),
            parse_mode="HTML"
        )
        
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10:00"
        )
    finally:
        session.close() 