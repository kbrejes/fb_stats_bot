"""
Finite State Machine for handling conversation flows in the Telegram bot.
This module implements a multi-step conversation with state tracking.
"""
import logging
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.fsm.storage.base import StorageKey
from config.settings import OWNER_ID

from src.storage.database import get_session
from src.storage.models import User, Account
from src.utils.logger import get_logger
from src.api.facebook import FacebookAdsClient
from config.settings import ADMIN_USERS
from src.bot.keyboards import build_main_menu_keyboard
from src.utils.bot_helpers import fix_user_id
from src.utils.languages import get_language
from src.utils.permissions import get_available_roles, is_valid_role, Role, has_permission, Permission

logger = get_logger(__name__)

# Create a router for FSM handlers
router = Router()

# Define FSM states for new user flow
class NewUserStates(StatesGroup):
    """States for new user registration flow."""
    waiting_for_admin = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
    selecting_account = State()  # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selecting_role = State()  # –í—ã–±–æ—Ä —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# Define states
class UserStates(StatesGroup):
    selecting_role = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """
    Handle the /start command.
    
    Args:
        message: The message object.
        state: The FSM context.
    """
    user_id = await fix_user_id(message.from_user.id)
    
    # Get user's language
    lang = get_language(user_id)
    
    session = get_session()
    try:
        # Check if user exists in database
        user = session.query(User).filter_by(telegram_id=user_id).first()
        
        if user:
            # User already exists, show appropriate message based on role
            if user.role == "owner":
                await message.answer(
                    "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
                    reply_markup=build_main_menu_keyboard(user.role)
                )
            else:
                # Get user's account names
                accounts = session.query(Account).filter_by(telegram_id=user_id).all()
                account_names = [acc.name or acc.fb_account_id for acc in accounts]
                accounts_str = "\n‚Ä¢ ".join(account_names) if account_names else "–Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
                
                await message.answer(
                    f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
                    f"–í–∞—à–∞ —Ä–æ–ª—å: {user.role}\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n‚Ä¢ {accounts_str}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
                    reply_markup=build_main_menu_keyboard(user.role)
                )
            return
        
        # New user registration process
        welcome_message = await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–æ–≤–∏ –õ–∏–¥–æ–≤ –ë–æ—Ç ü´∂ \n\n"
            "–°–∫–æ—Ä–æ –º—ã –≤—ã–¥–∞–¥–∏–º –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ üïë"
        )
        
        # Save user data in state
        user_data = {
            'telegram_id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name,
            'full_name': message.from_user.full_name,
            'created_at': datetime.utcnow().isoformat(),
            'welcome_message_id': welcome_message.message_id,
            'welcome_chat_id': welcome_message.chat.id
        }
        
        # Notify admins about new user
        admin_users = session.query(User).filter(User.role.in_(["owner", "admin"])).all()
        admin_message = (
            f"üì± –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø:\n"
            f"üë§ {message.from_user.full_name}\n"
            f"üÜî {user_id}\n"
            f"Username: @{message.from_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
        )
        
        # Create keyboard for admin actions
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
            callback_data=f"new_user:accept:{user_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"new_user:reject:{user_id}"
        ))
        builder.adjust(2)
        
        for admin in admin_users:
            try:
                # Set state for the new user
                new_key = StorageKey(
                    bot_id=message.bot.id,
                    chat_id=user_id,
                    user_id=user_id
                )
                new_state = FSMContext(storage=state.storage, key=new_key)
                await new_state.set_state(NewUserStates.waiting_for_admin)
                await new_state.update_data(new_user_data=user_data)
                
                # Send message to admin with buttons
                await message.bot.send_message(
                    admin.telegram_id,
                    admin_message,
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin.telegram_id}: {e}")
                
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

@router.callback_query(F.data.startswith("new_user:"))
async def process_new_user_action(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞ –ø–æ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    action, user_id = callback.data.split(":")[1:]
    user_id = int(user_id)
    admin_id = callback.from_user.id
    logger.info(f"[NEW_USER_ACTION] üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è '{action}' –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π state –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_key = StorageKey(
        bot_id=callback.bot.id,
        chat_id=user_id,
        user_id=user_id
    )
    user_state = FSMContext(storage=state.storage, key=new_key)
    logger.debug(f"[NEW_USER_ACTION] üîë –°–æ–∑–¥–∞–Ω state –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª—é—á–æ–º: {new_key}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = await user_state.get_state()
    logger.debug(f"[NEW_USER_ACTION] üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    logger.debug(f"[NEW_USER_ACTION] üìä –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {NewUserStates.waiting_for_admin.state}")
    
    if current_state != NewUserStates.waiting_for_admin.state:
        logger.error(f"[NEW_USER_ACTION] ‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –¢–µ–∫—É—â–µ–µ: {current_state}, "
                    f"–û–∂–∏–¥–∞–µ–º–æ–µ: {NewUserStates.waiting_for_admin.state}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await user_state.clear()
        logger.debug(f"[NEW_USER_ACTION] üóë State –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω")
        return
        
    state_data = await user_state.get_data()
    new_user_data = state_data.get('new_user_data')
    logger.debug(f"[NEW_USER_ACTION] üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_user_data}")
    
    if not new_user_data or new_user_data['telegram_id'] != user_id:
        logger.error(f"[NEW_USER_ACTION] ‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                    f"–û–∂–∏–¥–∞–µ–º—ã–π user_id: {user_id}, –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {new_user_data}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
        await user_state.clear()
        logger.debug(f"[NEW_USER_ACTION] üóë State –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω")
        return
    
    if action == "accept":
        logger.info(f"[NEW_USER_ACTION] ‚úÖ –ê–¥–º–∏–Ω –ø—Ä–∏–Ω—è–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∞
        accounts = await get_accounts(admin_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º admin_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        
        if not accounts:
            logger.error(f"[NEW_USER_ACTION] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}")
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Facebook."
            )
            await user_state.clear()
            logger.debug(f"[NEW_USER_ACTION] üóë State –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω")
            return
            
        logger.debug(f"[NEW_USER_ACTION] üìä –ü–æ–ª—É—á–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        builder = InlineKeyboardBuilder()
        for account in accounts:
            account_id = account.get('id')
            account_name = account.get('name', f"–ê–∫–∫–∞—É–Ω—Ç {account_id}")
            
            if len(account_name) > 30:
                account_name = account_name[:27] + '...'
            
            builder.add(InlineKeyboardButton(
                text=account_name,
                callback_data=f"assign_account:{user_id}:{account_id}"
            ))
            logger.debug(f"[NEW_USER_ACTION] üîò –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {account_name} ({account_id})")
        
        builder.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"assign_account:{user_id}:cancel"
        ))
        
        builder.adjust(1)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞
        await user_state.set_state(NewUserStates.selecting_account)
        new_state = await user_state.get_state()
        logger.debug(f"[NEW_USER_ACTION] üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
        if new_state != NewUserStates.selecting_account.state:
            logger.error(f"[NEW_USER_ACTION] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ. "
                        f"–¢–µ–∫—É—â–µ–µ: {new_state}, –û–∂–∏–¥–∞–µ–º–æ–µ: {NewUserStates.selecting_account.state}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.")
            await user_state.clear()
            logger.debug(f"[NEW_USER_ACTION] üóë State –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω")
            return
            
        await callback.message.edit_text(
            f"‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_user_data['full_name']}:",
            reply_markup=builder.as_markup()
        )
        logger.info(f"[NEW_USER_ACTION] üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    elif action == "reject":
        logger.info(f"[NEW_USER_ACTION] ‚ùå –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.bot.send_message(
            user_id,
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        logger.debug(f"[NEW_USER_ACTION] üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏")
        
        await callback.message.edit_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_data['full_name']} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω."
        )
        await user_state.clear()
        logger.debug(f"[NEW_USER_ACTION] üóë State –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω")
    
    await callback.answer()
    logger.debug(f"[NEW_USER_ACTION] ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è '{action}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@router.callback_query(F.data.startswith("assign_account:"))
async def process_account_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    _, user_id, account_id = callback.data.split(":")
    user_id = int(user_id)
    admin_id = callback.from_user.id
    logger.info(f"[ACCOUNT_SELECTION] üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –∞–¥–º–∏–Ω–æ–º {admin_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_key = StorageKey(
        bot_id=callback.bot.id,
        chat_id=user_id,
        user_id=user_id
    )
    user_state = FSMContext(storage=state.storage, key=new_key)
    logger.debug(f"[ACCOUNT_SELECTION] üîë –°–æ–∑–¥–∞–Ω state –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª—é—á–æ–º: {new_key}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await user_state.get_state()
    logger.debug(f"[ACCOUNT_SELECTION] üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    logger.debug(f"[ACCOUNT_SELECTION] üìä –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {NewUserStates.selecting_account.state}")
    
    if current_state != NewUserStates.selecting_account.state:
        logger.error(f"[ACCOUNT_SELECTION] ‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –¢–µ–∫—É—â–µ–µ: {current_state}, "
                    f"–û–∂–∏–¥–∞–µ–º–æ–µ: {NewUserStates.selecting_account.state}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state_data = await user_state.get_data()
    new_user_data = state_data.get('new_user_data')
    logger.debug(f"[ACCOUNT_SELECTION] üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_user_data}")
    
    if not new_user_data or new_user_data['telegram_id'] != user_id:
        logger.error(f"[ACCOUNT_SELECTION] ‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                    f"–û–∂–∏–¥–∞–µ–º—ã–π user_id: {user_id}, –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {new_user_data}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
        await user_state.clear()
        logger.debug(f"[ACCOUNT_SELECTION] üóë State –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω")
        return
    
    if account_id == "cancel":
        logger.info(f"[ACCOUNT_SELECTION] ‚ùå –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.message.edit_text(
            f"‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {new_user_data['full_name']} –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )
        await user_state.clear()
        logger.debug(f"[ACCOUNT_SELECTION] üóë State –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    await user_state.update_data(selected_account_id=account_id)
    logger.debug(f"[ACCOUNT_SELECTION] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç {account_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π
    roles = await get_available_roles()
    logger.debug(f"[ACCOUNT_SELECTION] üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {roles}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–æ–ª—è–º–∏
    builder = InlineKeyboardBuilder()
    for role in roles:
        builder.add(InlineKeyboardButton(
            text=role,
            callback_data=f"assign_role:{user_id}:{role}"
        ))
        logger.debug(f"[ACCOUNT_SELECTION] üîò –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–æ–ª–∏: {role}")
    
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"assign_role:{user_id}:cancel"
    ))
    
    builder.adjust(1)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
    await user_state.set_state(NewUserStates.selecting_role)
    new_state = await user_state.get_state()
    logger.debug(f"[ACCOUNT_SELECTION] üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
    if new_state != NewUserStates.selecting_role.state:
        logger.error(f"[ACCOUNT_SELECTION] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ. "
                    f"–¢–µ–∫—É—â–µ–µ: {new_state}, –û–∂–∏–¥–∞–µ–º–æ–µ: {NewUserStates.selecting_role.state}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.")
        await user_state.clear()
        logger.debug(f"[ACCOUNT_SELECTION] üóë State –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω")
        return
        
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_user_data['full_name']}:",
        reply_markup=builder.as_markup()
    )
    logger.info(f"[ACCOUNT_SELECTION] üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    await callback.answer()
    logger.debug(f"[ACCOUNT_SELECTION] ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@router.callback_query(F.data.startswith("assign_role:"))
async def process_role_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        _, user_id, role = callback.data.split(":")
        user_id = int(user_id)
        admin_id = callback.from_user.id
        logger.info(f"[ROLE_SELECTION] üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ '{role}' –∞–¥–º–∏–Ω–æ–º {admin_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_key = StorageKey(
            bot_id=callback.bot.id,
            chat_id=user_id,
            user_id=user_id
        )
        user_state = FSMContext(storage=state.storage, key=new_key)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await user_state.get_state()
        if current_state != NewUserStates.selecting_role.state:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏.", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state_data = await user_state.get_data()
        new_user_data = state_data.get('new_user_data')
        fb_account_id = state_data.get('selected_account_id')
        
        if not new_user_data or new_user_data['telegram_id'] != user_id:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
            return
        
        if role == "cancel":
            await callback.message.edit_text(
                f"‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {new_user_data['full_name']} –æ—Ç–º–µ–Ω–µ–Ω–æ."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
        if not is_valid_role(role) or role == Role.OWNER.value:
            logger.error(f"[ROLE_SELECTION] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–æ–ª–∏: {role}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–æ–ª–∏")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        session = get_session()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_user = session.query(User).filter_by(telegram_id=user_id).first()
            if existing_user:
                logger.error(f"[ROLE_SELECTION] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ Facebook API
            account_name = None
            try:
                client = FacebookAdsClient(admin_id)
                fb_accounts = await client.get_ad_accounts()
                account_name = next((acc['name'] for acc in fb_accounts if acc['id'] == fb_account_id), None)
            except Exception as e:
                logger.error(f"[ROLE_SELECTION] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=user_id,
                username=new_user_data['username'],
                first_name=new_user_data['first_name'],
                last_name=new_user_data['last_name'],
                role=role,
                created_at=datetime.fromisoformat(new_user_data['created_at'])
            )
            session.add(user)
            session.commit()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ accounts
            account = Account(
                telegram_id=user_id,
                fb_account_id=fb_account_id,
                name=account_name,
                created_at=datetime.utcnow()
            )
            session.add(account)
            session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                welcome_message_id = new_user_data.get('welcome_message_id')
                welcome_chat_id = new_user_data.get('welcome_chat_id')
                if welcome_message_id and welcome_chat_id:
                    try:
                        await callback.bot.delete_message(welcome_chat_id, welcome_message_id)
                    except Exception as e:
                        logger.warning(f"Could not delete welcome message: {str(e)}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–æ–º
                await callback.bot.send_message(
                    user_id,
                    "‚úÖ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã –≤ Instagram –∏ Facebook. "
                    "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"–ê–∫–∫–∞—É–Ω—Ç—ã\", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ—ë.",
                    reply_markup=build_main_menu_keyboard(role)
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                account_display_name = account_name or fb_account_id
                await callback.message.edit_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {new_user_data['full_name']} —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É "
                    f"{account_display_name} —Å —Ä–æ–ª—å—é {role}."
                )
            except Exception as e:
                logger.error(f"Error sending messages after role assignment: {str(e)}")
            
        except Exception as e:
            logger.error(f"[ROLE_SELECTION] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {str(e)}")
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            if session:
                session.rollback()
        finally:
            if session:
                session.close()
            await callback.answer()
            await user_state.clear()
            
    except Exception as e:
        logger.error(f"[ROLE_SELECTION] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def get_accounts(user_id: int) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (owner):
    - –ü–æ–ª—É—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Facebook API
    - –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
    
    –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –ë–î
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω owner'–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    logger.debug(f"[GET_ACCOUNTS] üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    session = get_session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            logger.error(f"[GET_ACCOUNTS] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return []
            
        logger.debug(f"[GET_ACCOUNTS] üë§ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.role}")
        
        # –ù–∞—Ö–æ–¥–∏–º owner'–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
        owner = session.query(User).filter_by(role="owner").first()
        if not owner:
            logger.error("[GET_ACCOUNTS] ‚ùå Owner –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return []
            
        owner_id = owner.telegram_id
        logger.debug(f"[GET_ACCOUNTS] üëë –ù–∞–π–¥–µ–Ω owner —Å ID: {owner_id}")
        
        # –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω owner'–∞
        try:
            client = FacebookAdsClient(owner_id)
            fb_accounts = await client.get_ad_accounts()
            logger.debug(f"[GET_ACCOUNTS] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(fb_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ Facebook API")
            
            if user.role == "owner":
                # –î–ª—è owner'–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –ë–î
                for account_data in fb_accounts:
                    account_id = account_data.get('id')
                    account_name = account_data.get('name', f"–ê–∫–∫–∞—É–Ω—Ç {account_id}")
                    
                    if not account_id:
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                    existing = session.query(Account).filter_by(
                        fb_account_id=account_id
                    ).all()
                    
                    for acc in existing:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                        acc.name = account_name
                        acc.currency = account_data.get('currency')
                        acc.timezone_name = account_data.get('timezone_name')
                        acc.updated_at = datetime.utcnow()
                        logger.debug(f"[GET_ACCOUNTS] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {account_id} —Å –∏–º–µ–Ω–µ–º {account_name}")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è owner
                    if not any(acc.telegram_id == user_id for acc in existing):
                        new_account = Account(
                            telegram_id=user_id,
                            fb_account_id=account_id,
                            name=account_name,
                            currency=account_data.get('currency'),
                            timezone_name=account_data.get('timezone_name')
                        )
                        session.add(new_account)
                        logger.debug(f"[GET_ACCOUNTS] ‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: {account_id} —Å –∏–º–µ–Ω–µ–º {account_name}")
                
                session.commit()
                logger.debug("[GET_ACCOUNTS] üíæ –ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
                
                return fb_accounts
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                user_accounts = session.query(Account).filter_by(telegram_id=user_id).all()
                logger.debug(f"[GET_ACCOUNTS] üìã –ù–∞–π–¥–µ–Ω–æ {len(user_accounts)} –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ë–î")
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Facebook
                fb_accounts_dict = {acc['id']: acc for acc in fb_accounts}
                
                result = []
                for account in user_accounts:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Facebook, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                    if account.fb_account_id in fb_accounts_dict:
                        fb_data = fb_accounts_dict[account.fb_account_id]
                        account_name = fb_data.get('name')
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –ë–î
                        account.name = account_name
                        account.updated_at = datetime.utcnow()
                        result.append({
                            'id': account.fb_account_id,
                            'name': account_name,
                            'currency': fb_data.get('currency'),
                            'timezone_name': fb_data.get('timezone_name')
                        })
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ
                        result.append({
                            'id': account.fb_account_id,
                            'name': account.name or f"–ê–∫–∫–∞—É–Ω—Ç {account.fb_account_id}",
                            'currency': account.currency,
                            'timezone_name': account.timezone_name
                        })
                
                session.commit()
                return result
                
        except Exception as e:
            logger.error(f"[GET_ACCOUNTS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ Facebook API: {str(e)}")
            if user.role != "owner":
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                accounts = session.query(Account).filter_by(telegram_id=user_id).all()
                return [
                    {
                        'id': account.fb_account_id,
                        'name': account.name or f"–ê–∫–∫–∞—É–Ω—Ç {account.fb_account_id}",
                        'currency': account.currency,
                        'timezone_name': account.timezone_name
                    }
                    for account in accounts
                ]
            return []
            
    except Exception as e:
        logger.error(f"[GET_ACCOUNTS] ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return []
    finally:
        session.close()
        logger.debug("[GET_ACCOUNTS] üóë –°–µ—Å—Å–∏—è –ë–î –∑–∞–∫—Ä—ã—Ç–∞")

async def get_available_roles() -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π.
    
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π, –∏—Å–∫–ª—é—á–∞—è —Ä–æ–ª—å "owner"
    """
    from src.utils.permissions import get_available_roles as get_roles_sync
    return get_roles_sync(exclude_owner=True)

async def check_token_validity(token: str) -> Tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ Facebook.
    
    Args:
        token: Facebook —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Facebook API
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not token:
            return False, "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        return True, None
    except Exception as e:
        return False, str(e)

@router.message(Command("delete_role"))
async def cmd_delete_role(message: Message):
    """
    –£–¥–∞–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
    """
    user_id = message.from_user.id
    logger.info(f"[DELETE_ROLE] üóë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /delete_role –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    session = get_session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin = session.query(User).filter_by(telegram_id=user_id).first()
        if not admin or not has_permission(admin.role, Permission.MANAGE_USERS.value):
            logger.warning(f"[DELETE_ROLE] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –±–µ–∑ –ø—Ä–∞–≤: {user_id}")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        args = message.text.split()
        if len(args) != 2:
            logger.warning(f"[DELETE_ROLE] ‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                "–ü—Ä–∏–º–µ—Ä: /delete_role 123456789"
            )
            return
        
        try:
            target_user_id = int(args[1])
        except ValueError:
            logger.error(f"[DELETE_ROLE] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {args[1]}")
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = session.query(User).filter_by(telegram_id=target_user_id).first()
        if not user:
            logger.warning(f"[DELETE_ROLE] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {target_user_id}")
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω —É–¥–∞–ª–∏—Ç—å owner'–∞
        if user.role == Role.OWNER.value:
            logger.warning(f"[DELETE_ROLE] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è owner'–∞: {target_user_id}")
            await message.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å owner'–∞ —Å–∏—Å—Ç–µ–º—ã.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∞
        user_info = f"{user.username} ({user.first_name} {user.last_name})"
        old_role = user.role
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        session.query(Account).filter_by(telegram_id=target_user_id).delete()
        logger.info(f"[DELETE_ROLE] üóë –£–¥–∞–ª–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.delete(user)
        session.commit()
        logger.info(f"[DELETE_ROLE] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n"
            f"–°—Ç–∞—Ä–∞—è —Ä–æ–ª—å: {old_role}\n\n"
            "–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
        
    except Exception as e:
        logger.error(f"[DELETE_ROLE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {str(e)}")
        session.rollback()
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    finally:
        session.close()
        logger.debug(f"[DELETE_ROLE] üóë –°–µ—Å—Å–∏—è –ë–î –∑–∞–∫—Ä—ã—Ç–∞")

@router.message(Command("list_users"))
async def cmd_list_users(message: Message):
    """
    List all users with their roles and accounts.
    
    Args:
        message: The message object.
    """
    user_id = await fix_user_id(message.from_user.id)
    
    session = get_session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user or not has_permission(user.role, Permission.VIEW_ADMIN_PANEL.value):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        # Get all users first
        users = session.query(User).all()
        
        if not users:
            await message.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # Format user list
        user_list = []
        for user in users:
            # Add user info
            user_list.append(f"\nüë§ {user.username or user.first_name} (ID: {user.telegram_id})")
            user_list.append(f"üìä –†–æ–ª—å: {user.role}")
            
            # Get accounts for this user
            accounts = session.query(Account).filter_by(telegram_id=user.telegram_id).all()
            
            if accounts:
                user_list.append("üìÅ –ê–∫–∫–∞—É–Ω—Ç—ã:")
                for account in accounts:
                    # Truncate long account names
                    account_name = account.name[:27] + "..." if account.name and len(account.name) > 30 else account.name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    user_list.append(f"   ‚Ä¢ {account_name}")
            else:
                user_list.append("üìÅ –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # Send the formatted list
        await message.answer("\n".join(user_list))
        
    except Exception as e:
        logger.error(f"Error listing users: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    finally:
        session.close()