"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤.
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from src.services.analytics import AnalyticsService, ComparisonPeriod
from src.data.processor import DataProcessor
from src.api.facebook import FacebookAdsClient, FacebookAdsApiError
from src.utils.logger import get_logger
from config.settings import OPENAI_API_KEY

logger = get_logger(__name__)
router = Router()

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics_service = AnalyticsService(OPENAI_API_KEY)

@router.callback_query(F.data.startswith("analytics:"))
async def handle_analytics_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    try:
        action = callback.data.split(":")[1]
        user_id = callback.from_user.id
        
        if action == "menu":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            builder = InlineKeyboardBuilder()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
            builder.add(InlineKeyboardButton(
                text="–í—á–µ—Ä–∞ vs –ü–æ–∑–∞–≤—á–µ—Ä–∞",
                callback_data="period:daily"
            ))
            builder.add(InlineKeyboardButton(
                text="–≠—Ç–∞ vs –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è",
                callback_data="period:weekly"
            ))
            builder.add(InlineKeyboardButton(
                text="–ü—Ä–æ—à–ª–∞—è vs –ü–æ–∑–∞–ø—Ä–æ—à–ª–∞—è",
                callback_data="period:prev_weekly"
            ))
            builder.add(InlineKeyboardButton(
                text="2 –ù–µ–¥–µ–ª–∏ vs –ú–µ—Å—è—Ü",
                callback_data="period:biweekly_vs_monthly"
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            builder.add(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="menu:main"
            ))
            
            builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
            
            await callback.message.edit_text(
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
                reply_markup=builder.as_markup()
            )
            
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {action}")
            await callback.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")
            ).as_markup()
        )

@router.callback_query(F.data.startswith("period:"))
async def handle_period_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    try:
        period_type = callback.data.split(":")[1]
        user_id = callback.from_user.id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        fb_client = FacebookAdsClient(user_id)
        accounts = await fb_client.get_ad_accounts()
        
        if not accounts:
            await callback.message.edit_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                reply_markup=InlineKeyboardBuilder().add(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics:menu")
                ).as_markup()
            )
            return
            
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        for account in accounts:
            account_id = account.get('id')
            account_name = account.get('name', f"–ê–∫–∫–∞—É–Ω—Ç {account_id}")
            builder.add(InlineKeyboardButton(
                text=account_name,
                callback_data=f"compare:{period_type}:{account_id}"
            ))
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="analytics:menu"
        ))
        
        builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
        
        await callback.message.edit_text(
            "üóø –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=builder.as_markup()
        )
        
    except FacebookAdsApiError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Facebook API: {str(e)}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API Facebook: {str(e)}",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics:menu")
            ).as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics:menu")
            ).as_markup()
        )

@router.callback_query(F.data.startswith("compare:"))
async def handle_comparison(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        _, period_type, account_id = callback.data.split(":")
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        fb_client = FacebookAdsClient(user_id)
        accounts = await fb_client.get_ad_accounts()
        account_name = next(
            (acc.get('name', f"–ê–∫–∫–∞—É–Ω—Ç {account_id}") 
             for acc in accounts if acc.get('id') == account_id),
            f"–ê–∫–∫–∞—É–Ω—Ç {account_id}"
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞ –≤ enum
        period = ComparisonPeriod(period_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis = await analytics_service.get_comprehensive_analysis(
            user_id, account_id, account_name
        )
        
        if not analysis:
            await callback.message.edit_text(
                f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏.",
                reply_markup=InlineKeyboardBuilder().add(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics:menu")
                ).as_markup()
            )
            return
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        message_parts = DataProcessor.truncate_for_telegram(analysis)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
        builder = InlineKeyboardBuilder()
        
        builder.add(InlineKeyboardButton(
            text="ü§ñ –ê–Ω–∞–ª–∏–∑ OpenAI",
            callback_data=f"analyze:{period_type}:{account_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="analytics:menu"
        ))
        
        builder.adjust(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.edit_text(
            message_parts[0],
            reply_markup=builder.as_markup()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        for part in message_parts[1:]:
            await callback.message.answer(part)
            
    except FacebookAdsApiError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Facebook API: {str(e)}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API Facebook: {str(e)}",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics:menu")
            ).as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–æ–≤: {str(e)}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics:menu")
            ).as_markup()
        )

@router.callback_query(F.data.startswith("details:"))
async def handle_details(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    try:
        _, period_type, account_id = callback.data.split(":")
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        fb_client = FacebookAdsClient(user_id)
        accounts = await fb_client.get_ad_accounts()
        account_name = next(
            (acc.get('name', f"–ê–∫–∫–∞—É–Ω—Ç {account_id}") 
             for acc in accounts if acc.get('id') == account_id),
            f"–ê–∫–∫–∞—É–Ω—Ç {account_id}"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis = await analytics_service.get_comprehensive_analysis(
            user_id, account_id, account_name
        )
        
        if not analysis:
            await callback.message.edit_text(
                f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏.",
                reply_markup=InlineKeyboardBuilder().add(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"compare:{period_type}:{account_id}")
                ).as_markup()
            )
            return
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        message_parts = DataProcessor.truncate_for_telegram(analysis)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="ü§ñ –ê–Ω–∞–ª–∏–∑ OpenAI",
            callback_data=f"analyze:{period_type}:{account_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"compare:{period_type}:{account_id}"
        ))
        builder.adjust(1)
        
        await callback.message.edit_text(
            message_parts[0],
            reply_markup=builder.as_markup()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        for part in message_parts[1:]:
            await callback.message.answer(part)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π: {str(e)}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"compare:{period_type}:{account_id}")
            ).as_markup()
        )

@router.callback_query(F.data.startswith("analyze:"))
async def handle_analysis(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ OpenAI."""
    try:
        _, period_type, account_id = callback.data.split(":")
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        fb_client = FacebookAdsClient(user_id)
        accounts = await fb_client.get_ad_accounts()
        account_name = next(
            (acc.get('name', f"–ê–∫–∫–∞—É–Ω—Ç {account_id}") 
             for acc in accounts if acc.get('id') == account_id),
            f"–ê–∫–∫–∞—É–Ω—Ç {account_id}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await callback.message.edit_text(
            "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é OpenAI...",
            reply_markup=None
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞ –≤ enum
        period = ComparisonPeriod(period_type)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        current_insights, previous_insights = await analytics_service.get_comparative_insights(
            user_id, account_id, period
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
        if not current_insights or not previous_insights:
            await callback.message.edit_text(
                f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_name} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏.",
                reply_markup=InlineKeyboardBuilder().add(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"compare:{period_type}:{account_id}")
                ).as_markup()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI
        analysis = await analytics_service.analyze_insights(
            current_insights,
            previous_insights,
            account_name
        )
        
        if not analysis:
            await callback.message.edit_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI",
                reply_markup=InlineKeyboardBuilder().add(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"compare:{period_type}:{account_id}")
                ).as_markup()
            )
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        message_parts = DataProcessor.truncate_for_telegram(analysis)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data=f"compare:{period_type}:{account_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="analytics:menu"
        ))
        builder.adjust(1)
        
        await callback.message.edit_text(
            message_parts[0],
            reply_markup=builder.as_markup()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        for part in message_parts[1:]:
            await callback.message.answer(part)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ OpenAI: {str(e)}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"compare:{period_type}:{account_id}")
            ).as_markup()
        ) 