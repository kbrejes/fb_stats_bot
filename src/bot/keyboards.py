"""
Keyboard builders for Telegram bot.
"""
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from typing import List, Dict, Any, Optional

from config.settings import DATE_PRESETS, EXPORT_FORMATS

def build_account_keyboard(accounts: List[Dict], add_stats: bool = False):
    """
    Build a keyboard with account selection buttons.
    
    Args:
        accounts: List of account data.
        add_stats: Whether to add stats buttons.
        
    Returns:
        Keyboard with account buttons.
    """
    builder = InlineKeyboardBuilder()
    button_count = 0
    
    for account in accounts:
        account_id = account.get('id')
        account_name = account.get('name', 'Unnamed Account')
        
        # Trim name if too long
        if len(account_name) > 30:
            account_name = account_name[:27] + '...'
            
        builder.add(InlineKeyboardButton(
            text=account_name,
            callback_data=f"account:{account_id}"
        ))
        button_count += 1
        
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üåé –ú–µ–Ω—é",
        callback_data="menu:main"
    ))
    button_count += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–Ω–æ—Å—Ç–∏
    if button_count % 2 != 0:
        builder.add(InlineKeyboardButton(
            text=" ", 
            callback_data="empty:action"
        ))
    
    # Build grid - –≤—Å–µ–≥–¥–∞ –ø–æ 2 –∫–Ω–æ–ø–∫–∞–º –≤ —Ä—è–¥—É
    builder.adjust(2)
    
    return builder.as_markup()

def build_campaign_keyboard(campaigns: List[Dict], add_stats: bool = False):
    """
    Build a keyboard with campaign selection buttons.
    
    Args:
        campaigns: List of campaign data.
        add_stats: Whether to add stats buttons.
        
    Returns:
        Keyboard with campaign buttons.
    """
    builder = InlineKeyboardBuilder()
    button_count = 0
    
    for campaign in campaigns:
        campaign_id = campaign.get('id')
        campaign_name = campaign.get('name', 'Unnamed Campaign')
        
        # Trim name if too long
        if len(campaign_name) > 30:
            campaign_name = campaign_name[:27] + '...'
            
        builder.add(InlineKeyboardButton(
            text=campaign_name,
            callback_data=f"campaign:{campaign_id}"
        ))
        button_count += 1
        
        # Add stats button if requested
        if add_stats:
            builder.add(InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data=f"campaign_stats:{campaign_id}:{campaign_name}"
            ))
            button_count += 1
    
    # Add "Back to accounts" button
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è",
        callback_data="menu:accounts"
    ))
    button_count += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üåé –ú–µ–Ω—é",
        callback_data="menu:main"
    ))
    button_count += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–Ω–æ—Å—Ç–∏
    if button_count % 2 != 0:
        builder.add(InlineKeyboardButton(
            text=" ", 
            callback_data="empty:action"
        ))
    
    # Build grid - –≤—Å–µ–≥–¥–∞ –ø–æ 2 –∫–Ω–æ–ø–∫–∞–º –≤ —Ä—è–¥—É
    builder.adjust(2)
    
    return builder.as_markup()

def build_ad_keyboard(ads: List[Dict], campaign_id: str, add_stats: bool = False):
    """
    Build a keyboard with ad selection buttons.
    
    Args:
        ads: List of ad data.
        campaign_id: The campaign ID to return to.
        add_stats: Whether to add stats buttons.
        
    Returns:
        Keyboard with ad buttons.
    """
    builder = InlineKeyboardBuilder()
    button_count = 0
    
    for ad in ads:
        ad_id = ad.get('id')
        ad_name = ad.get('name', 'Unnamed Ad')
        
        # Trim name if too long
        if len(ad_name) > 30:
            ad_name = ad_name[:27] + '...'
            
        builder.add(InlineKeyboardButton(
            text=ad_name,
            callback_data=f"ad:{ad_id}"
        ))
        button_count += 1
        
        # Add stats button if requested
        if add_stats:
            builder.add(InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data=f"ad_stats:{ad_id}:{ad_name}"
            ))
            button_count += 1
    
    # Add "Back to campaign" button
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è",
        callback_data=f"menu:campaign:{campaign_id}"
    ))
    button_count += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üåé –ú–µ–Ω—é",
        callback_data="menu:main"
    ))
    button_count += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–Ω–æ—Å—Ç–∏
    if button_count % 2 != 0:
        builder.add(InlineKeyboardButton(
            text=" ", 
            callback_data="empty:action"
        ))
    
    # Build grid - –≤—Å–µ–≥–¥–∞ –ø–æ 2 –∫–Ω–æ–ø–∫–∞–º –≤ —Ä—è–¥—É
    builder.adjust(2)
    
    return builder.as_markup()

def build_date_preset_keyboard(object_id: str, object_type: str, object_name: str = None):
    """
    Build a keyboard with date preset buttons.
    
    Args:
        object_id: The object ID.
        object_type: The object type (account, campaign, ad).
        object_name: Optional object name to pass in callback data.
        
    Returns:
        Keyboard with date preset buttons.
    """
    builder = InlineKeyboardBuilder()
    button_count = 0
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ—Å–µ—Ç—ã –¥–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ª—É—á—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    date_groups = {
        '–°–µ–≥–æ–¥–Ω—è/–í—á–µ—Ä–∞': {
            'today': 'üìÖ –°–µ–≥–æ–¥–Ω—è',
            'yesterday': 'üìÖ –í—á–µ—Ä–∞',
        },
        '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏': {
            'last_3d': 'üìÖ 3 –¥–Ω—è',
            'last_7d': 'üìÖ 7 –¥–Ω–µ–π',
            'last_14d': 'üìÖ 14 –¥–Ω–µ–π',
            'last_30d': 'üìÖ 30 –¥–Ω–µ–π',
        },
        '–ú–µ—Å—è—Ü—ã': {
            'this_month': 'üìÖ –≠—Ç–æ—Ç –º–µ—Å—è—Ü',
            'last_month': 'üìÖ –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü',
        },
        '–ù–µ–¥–µ–ª–∏': {
            'this_week_mon_today': 'üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è',
            'last_week_mon_sun': 'üìÖ –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è',
        }
    }
    
    # –í–ê–ñ–ù–´–ô FIX: Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 64 –±–∞–π—Ç–∞ –¥–ª—è callback_data
    # –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã BUTTON_DATA_INVALID –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ–º –∏–º—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ ID –∏ —Ç–∏–ø
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º
    for group_name, presets in date_groups.items():
        for preset, label in presets.items():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π callback_data –±–µ–∑ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞
            callback_data = f"stats:{object_type}:{object_id}:{preset}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É callback_data
            if len(callback_data) > 64:
                # –ï—Å–ª–∏ –¥–∞–∂–µ –±–µ–∑ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞ –¥–ª–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 64 –±–∞–π—Ç–∞, —Å–æ–∑–¥–∞–µ–º —É–∫–æ—Ä–æ—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                id_part = object_id
                if len(id_part) > 30:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ callback_data
                    id_part = id_part[:30]
                
                callback_data = f"stats:{object_type}:{id_part}:{preset}"
                
            builder.add(InlineKeyboardButton(
                text=label,
                callback_data=callback_data
            ))
            button_count += 1
    
    # Add "Back" button
    if object_type == 'account':
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data="menu:accounts"
        ))
        button_count += 1
    elif object_type == 'campaign':
        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –¥–ª–∏–Ω—É account_id
        account_id = object_id.split('_')[0] if '_' in object_id else object_id
        if len(account_id) > 30:
            account_id = account_id[:30]
        
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=f"back:account:{account_id}"
        ))
        button_count += 1
    elif object_type == 'ad':
        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –¥–ª–∏–Ω—É campaign_id
        campaign_id = object_id.split('_')[0] if '_' in object_id else object_id
        if len(campaign_id) > 30:
            campaign_id = campaign_id[:30]
            
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=f"menu:campaign:{campaign_id}"
        ))
        button_count += 1
    elif object_type == 'account_campaigns':
        # –î–ª—è —Ç–∞–±–ª–∏—Ü—ã –∫–∞–º–ø–∞–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=f"menu:account:{object_id}"
        ))
        button_count += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üåé –ú–µ–Ω—é",
        callback_data="menu:main"
    ))
    button_count += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–Ω–æ—Å—Ç–∏
    if button_count % 2 != 0:
        builder.add(InlineKeyboardButton(
            text=" ",
            callback_data="empty:action"
        ))
    
    # Build grid - –≤—Å–µ–≥–¥–∞ –ø–æ 2 –∫–Ω–æ–ø–∫–∞–º –≤ —Ä—è–¥—É
    builder.adjust(2)
    
    return builder.as_markup()

def build_export_format_keyboard(data_key: str):
    """
    Build a keyboard with export format buttons.
    
    Args:
        data_key: The key for the cached data to export.
        
    Returns:
        InlineKeyboardMarkup with export format buttons.
    """
    builder = InlineKeyboardBuilder()
    
    # Format buttons
    for format in EXPORT_FORMATS:
        builder.add(InlineKeyboardButton(
            text=format.upper(),
            callback_data=f"export:{data_key}:{format}"
        ))
    
    # Back button
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è",
        callback_data="back:cancel"
    ))
    
    # Build grid with 3 buttons in first row, 1 in second
    builder.adjust(3, 1)
    
    return builder.as_markup()

def build_main_menu_keyboard():
    """
    Build the main menu keyboard.
    
    Returns:
        InlineKeyboardMarkup with menu buttons.
    """
    builder = InlineKeyboardBuilder()
    
    # Main menu buttons
    builder.add(InlineKeyboardButton(
        text="üìä –ê–∫–∫–∞—É–Ω—Ç—ã",
        callback_data="menu:accounts"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        callback_data="menu:auth"
    ))
    
    builder.add(InlineKeyboardButton(
        text="ü™Ü –Ø–∑—ã–∫",
        callback_data="menu:language"
    ))
    
    # Build grid with 2 buttons per row
    builder.adjust(2)
    
    return builder.as_markup()

def build_confirmation_keyboard(action: str, object_id: str):
    """
    Build a confirmation keyboard.
    
    Args:
        action: The action to confirm.
        object_id: The object ID associated with the action.
        
    Returns:
        InlineKeyboardMarkup with confirm/cancel buttons.
    """
    builder = InlineKeyboardBuilder()
    
    # Confirm button
    builder.add(InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        callback_data=f"confirm:{action}:{object_id}"
    ))
    
    # Cancel button
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è",
        callback_data="back:cancel"
    ))
    
    # Build grid with 2 buttons per row
    builder.adjust(2)
    
    return builder.as_markup()

def build_language_keyboard():
    """
    Build a keyboard for language selection.
    
    Returns:
        InlineKeyboardMarkup with language buttons.
    """
    builder = InlineKeyboardBuilder()
    
    # Add language buttons
    builder.add(InlineKeyboardButton(
        text="üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        callback_data="language:ru"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üá¨üáß English",
        callback_data="language:en"
    ))
    
    # Add back button
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è",
        callback_data="menu:main"
    ))
    
    # Build grid with 2 buttons per row
    builder.adjust(2, 1)
    
    return builder.as_markup() 