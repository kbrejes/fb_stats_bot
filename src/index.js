require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!process.env.BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    console.log('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞');
    process.exit(1);
}

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è CI/CD!

–í–µ—Ä—Å–∏—è: 1.0.0
–°–µ—Ä–≤–µ—Ä: ${process.env.NODE_ENV || 'development'}
–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}

–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ—é —Ä–∞–±–æ—Ç—É:
    `;

    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üîß –¢–µ—Å—Ç 1', callback_data: 'test_1' },
                    { text: '‚ö° –¢–µ—Å—Ç 2', callback_data: 'test_2' }
                ],
                [
                    { text: 'üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞', callback_data: 'server_status' }
                ],
                [
                    { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh' }
                ]
            ]
        }
    };

    bot.sendMessage(chatId, welcomeMessage, options);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', (callbackQuery) => {
    const message = callbackQuery.message;
    const data = callbackQuery.data;
    const chatId = message.chat.id;

    let responseText = '';

    switch (data) {
        case 'test_1':
            responseText = '‚úÖ –ö–Ω–æ–ø–∫–∞ "–¢–µ—Å—Ç 1" —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ' + new Date().toLocaleString('ru-RU');
            break;
        
        case 'test_2':
            responseText = '‚úÖ –ö–Ω–æ–ø–∫–∞ "–¢–µ—Å—Ç 2" —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!';
            break;
        
        case 'server_status':
            responseText = `
üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:
‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0.0
‚Ä¢ –°—Ä–µ–¥–∞: ${process.env.NODE_ENV || 'development'}
‚Ä¢ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
‚Ä¢ –ü–∞–º—è—Ç—å: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} MB
‚Ä¢ –ê–ø—Ç–∞–π–º: ${Math.round(process.uptime())} —Å–µ–∫—É–Ω–¥
            `;
            break;
        
        case 'refresh':
            responseText = 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ!\n–í—Ä–µ–º—è: ' + new Date().toLocaleString('ru-RU');
            break;
        
        default:
            responseText = '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞';
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    bot.answerCallbackQuery(callbackQuery.id);
    bot.sendMessage(chatId, responseText);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = `
üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CI/CD –ø–∞–π–ø–ª–∞–π–Ω–∞.
    `;
    bot.sendMessage(chatId, helpMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ /status
bot.onText(/\/status/, (msg) => {
    const chatId = msg.chat.id;
    const statusMessage = `
ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç: ‚úÖ
‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0.0
‚Ä¢ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}
‚Ä¢ –°—Ä–µ–¥–∞: ${process.env.NODE_ENV || 'development'}
    `;
    bot.sendMessage(chatId, statusMessage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});

console.log('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'); 