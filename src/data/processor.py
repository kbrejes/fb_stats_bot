"""
Process and format data for display in Telegram.
"""
import pandas as pd
from typing import Dict, List, Any, Optional, Union, Tuple
from datetime import datetime, timedelta
import random

from src.utils.logger import get_logger

logger = get_logger(__name__)

class DataProcessor:
    """
    Process and format data for display.
    """
    
    @staticmethod
    def format_accounts(accounts: List[Dict]) -> str:
        """
        Format a list of accounts into a text table.
        
        Args:
            accounts: List of account data.
            
        Returns:
            Formatted text table.
        """
        if not accounts:
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        
        # Create a DataFrame
        df = pd.DataFrame(accounts)
        
        # Select and rename columns
        selected_columns = ['id', 'name', 'status', 'currency']
        if all(col in df.columns for col in selected_columns):
            df = df[selected_columns]
            df.columns = ['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', '–í–∞–ª—é—Ç–∞']
            
            # Convert status codes to human-readable
            status_map = {
                1: '–ê–∫—Ç–∏–≤–Ω—ã–π',
                2: '–û—Ç–∫–ª—é—á–µ–Ω',
                3: '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                7: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                9: '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
                100: '–ó–∞–∫—Ä—ã—Ç',
                101: '–õ—é–±–æ–π'
            }
            if '–°—Ç–∞—Ç—É—Å' in df.columns:
                df['–°—Ç–∞—Ç—É—Å'] = df['–°—Ç–∞—Ç—É—Å'].map(lambda x: status_map.get(x, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({x})'))
            
            # Format as text table
            header = " | ".join(df.columns)
            separator = "-" * len(header)
            rows = [" | ".join(map(str, row)) for _, row in df.iterrows()]
            
            return f"{header}\n{separator}\n" + "\n".join(rows)
        else:
            # Fallback if expected columns are not found
            return "\n".join([f"{account.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} ({account.get('id', '–ë–µ–∑ ID')})" 
                             for account in accounts])
    
    @staticmethod
    def format_campaigns(campaigns: List[Dict]) -> str:
        """
        Format a list of campaigns into a text table.
        
        Args:
            campaigns: List of campaign data.
            
        Returns:
            Formatted text table.
        """
        if not campaigns:
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"
        
        # Create a DataFrame
        df = pd.DataFrame(campaigns)
        
        # Select and rename columns
        selected_columns = ['id', 'name', 'status', 'objective']
        if all(col in df.columns for col in selected_columns):
            df = df[selected_columns]
            df.columns = ['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', '–¶–µ–ª—å']
            
            # Format as text table
            header = " | ".join(df.columns)
            separator = "-" * len(header)
            rows = [" | ".join(map(str, row)) for _, row in df.iterrows()]
            
            return f"{header}\n{separator}\n" + "\n".join(rows)
        else:
            # Fallback if expected columns are not found
            return "\n".join([f"{campaign.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} ({campaign.get('id', '–ë–µ–∑ ID')})" 
                             for campaign in campaigns])
    
    @staticmethod
    def format_ads(ads: List[Dict]) -> str:
        """
        Format a list of ads into a text table.
        
        Args:
            ads: List of ad data.
            
        Returns:
            Formatted text table.
        """
        if not ads:
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
        
        # Create a DataFrame
        df = pd.DataFrame(ads)
        
        # Select and rename columns
        selected_columns = ['id', 'name', 'status']
        if all(col in df.columns for col in selected_columns):
            df = df[selected_columns]
            df.columns = ['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å']
            
            # Format as text table
            header = " | ".join(df.columns)
            separator = "-" * len(header)
            rows = [" | ".join(map(str, row)) for _, row in df.iterrows()]
            
            return f"{header}\n{separator}\n" + "\n".join(rows)
        else:
            # Fallback if expected columns are not found
            return "\n".join([f"{ad.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} ({ad.get('id', '–ë–µ–∑ ID')})" 
                             for ad in ads])
    
    @staticmethod
    def format_insights(insights: List[Dict], account_name: str = "–ë–µ–∑ –∏–º–µ–Ω–∏") -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            insights: –°–ø–∏—Å–æ–∫ –∏–Ω—Å–∞–π—Ç–æ–≤
            account_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        """
        if not insights:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞
        try:
            date_start = insights[0].get('date_start')
            date_stop = insights[0].get('date_stop')
            
            if not date_start or not date_stop:
                return None
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã datetime
            start_date = datetime.strptime(date_start, '%Y-%m-%d')
            end_date = datetime.strptime(date_stop, '%Y-%m-%d')
            
            # –°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
            MONTHS = {
                1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
                5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
                9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
            }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            start_str = start_date.strftime('%d')
            end_str = end_date.strftime('%d')
            
            # –ï—Å–ª–∏ –º–µ—Å—è—Ü—ã —Ä–∞–∑–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
            if start_date.month != end_date.month:
                start_str = f"{start_str} {MONTHS[start_date.month]}"
                end_str = f"{end_str} {MONTHS[end_date.month]}"
            else:
                end_str = f"{end_str} {MONTHS[end_date.month]}"
                
        except Exception as e:
            logger.error(f"Error parsing dates: {str(e)}")
            return None
            
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_spend = sum(float(i.get('spend', 0)) for i in insights)
        total_reach = sum(float(i.get('reach', 0)) for i in insights)
        total_clicks = sum(float(i.get('clicks', 0)) for i in insights)
        total_impressions = sum(float(i.get('impressions', 0)) for i in insights)
        
        # –í—ã—á–∏—Å–ª—è–µ–º CTR –∏ CPC
        ctr = (total_clicks / total_impressions * 100) if total_impressions > 0 else 0
        cpc = total_spend / total_clicks if total_clicks > 0 else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö
        conversion_type = None
        conversions = 0
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        for insight in insights:
            for conversion in insight.get('conversions', []):
                action_type = conversion.get('action_type', '')
                if action_type.startswith('offsite_conversion.fb_pixel_custom.'):
                    conversion_type = action_type
                    conversions += float(conversion.get('value', 0))
                    break
            if conversion_type:
                break
        
        # –ï—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Å–∏–π –Ω–µ—Ç, –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ –ª–∏–¥—ã
        if not conversion_type:
            for insight in insights:
                for conversion in insight.get('conversions', []):
                    action_type = conversion.get('action_type', '')
                    if action_type in ['lead', 'offsite_conversion.fb_pixel_lead']:
                        conversion_type = action_type
                        conversions += float(conversion.get('value', 0))
                        break
                if conversion_type:
                    break
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if not conversion_type or conversions == 0:
            return None
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤—Ä—É—á–Ω—É—é
        conversion_cost = total_spend / conversions if conversions > 0 else None
        logger.info(f"Calculated conversion cost for {account_name}: {conversion_cost} (spend: {total_spend}, conversions: {conversions})")
            
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏
        emojis = ['üìú', 'üíå', 'üßß']
        random_emoji = random.choice(emojis)
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = [
            f"{random_emoji} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {start_str} - {end_str} ({account_name}):",
            "",
            f"–ö–æ–Ω–≤–µ—Ä—Å–∏–π: {int(conversions)}",
            f"–¶–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: ${conversion_cost:.2f}" if conversion_cost is not None else "–¶–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: –Ω/–¥",
            f"–°–ø–µ–Ω–¥: ${total_spend:.2f}\n",
            f"–û—Ö–≤–∞—Ç: {int(total_reach):,}".replace(",", " "),
            f"–ö–ª–∏–∫–∏: {int(total_clicks):,}".replace(",", " "),
            f"CTR: {ctr:.2f}%",
            f"CPC: ${cpc:.2f}\n",
            f"–¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–π: {conversion_type}"
        ]
        
        return "\n".join(message)
    
    @staticmethod
    def _get_overall_trend(metrics: Dict[str, Tuple[float, str]]) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏.
        
        Args:
            metrics: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–∏–Ω–∞–º–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        conversion_cost_change, direction = metrics.get('conversion_cost', (0.0, '='))
        
        # –ï—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —Å–Ω–∏–∑–∏–ª–∞—Å—å (‚Üì), —ç—Ç–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ
        if direction == '‚Üì':
            return "üü¢ –†–æ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        # –ï—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤—ã—Ä–æ—Å–ª–∞ (‚Üë), —ç—Ç–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ
        elif direction == '‚Üë':
            return "üî¥ –°–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return "‚ö™Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"

    @staticmethod
    def get_metrics(insights: List[Dict], normalize_by_days: bool = False, days_count: Optional[int] = None) -> Dict[str, float]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –∏–Ω—Å–∞–π—Ç–æ–≤.
        
        Args:
            insights: –°–ø–∏—Å–æ–∫ –∏–Ω—Å–∞–π—Ç–æ–≤
            normalize_by_days: –ù—É–∂–Ω–æ –ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
            days_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ None, –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_spend = 0
        total_reach = 0
        total_clicks = 0
        total_impressions = 0
        total_conversions = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
        for insight in insights:
            total_spend += float(insight.get('spend', 0))
            total_reach += float(insight.get('reach', 0))
            total_clicks += float(insight.get('clicks', 0))
            total_impressions += float(insight.get('impressions', 0))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            for conversion in insight.get('conversions', []):
                action_type = conversion.get('action_type', '')
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
                if action_type.startswith('offsite_conversion.fb_pixel_custom.'):
                    total_conversions += float(conversion.get('value', 0))
                # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–∏–¥—ã
                elif action_type in ['lead', 'offsite_conversion.fb_pixel_lead']:
                    total_conversions += float(conversion.get('value', 0))
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
        if normalize_by_days and insights:
            if days_count is None:
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                start_date = datetime.strptime(insights[0]['date_start'], '%Y-%m-%d')
                end_date = datetime.strptime(insights[0]['date_stop'], '%Y-%m-%d')
                days_count = (end_date - start_date).days + 1
            
            if days_count > 0:
                total_spend /= days_count
                total_reach /= days_count
                total_clicks /= days_count
                total_impressions /= days_count
                total_conversions /= days_count
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        ctr = (total_clicks / total_impressions * 100) if total_impressions > 0 else 0
        cpc = total_spend / total_clicks if total_clicks > 0 else 0
        conversion_cost = total_spend / total_conversions if total_conversions > 0 else 0
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        return {
            'spend': total_spend,
            'reach': total_reach,
            'clicks': total_clicks,
            'impressions': total_impressions,
            'conversions': total_conversions,
            'ctr': ctr,
            'cpc': cpc,
            'conversion_cost': conversion_cost
        }

    @staticmethod
    def format_comparative_insights(
        current_insights: List[Dict],
        previous_insights: List[Dict],
        account_name: str = "–ë–µ–∑ –∏–º–µ–Ω–∏",
        show_details: bool = True,
        normalize_by_days: bool = False,
        period_type: str = "daily"
    ) -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É –¥–≤—É–º—è –ø–µ—Ä–∏–æ–¥–∞–º–∏.
        
        Args:
            current_insights: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            previous_insights: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            account_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            show_details: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            normalize_by_days: –ù—É–∂–Ω–æ –ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
            period_type: –¢–∏–ø –ø–µ—Ä–∏–æ–¥–∞ (daily, weekly, monthly)
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        """
        if not current_insights or not previous_insights:
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑ –∏–Ω—Å–∞–π—Ç–æ–≤
        try:
            current_start = datetime.strptime(current_insights[0]['date_start'], '%Y-%m-%d')
            current_end = datetime.strptime(current_insights[0]['date_stop'], '%Y-%m-%d')
            previous_start = datetime.strptime(previous_insights[0]['date_start'], '%Y-%m-%d')
            previous_end = datetime.strptime(previous_insights[0]['date_stop'], '%Y-%m-%d')
            
            current_days = (current_end - current_start).days + 1
            previous_days = (previous_end - previous_start).days + 1
        except (KeyError, IndexError, ValueError):
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        current_metrics = DataProcessor.get_metrics(current_insights, normalize_by_days, current_days)
        previous_metrics = DataProcessor.get_metrics(previous_insights, normalize_by_days, previous_days)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏
        metrics_changes = {}
        for metric in ['conversions', 'conversion_cost', 'spend', 'reach', 'clicks', 'ctr', 'cpc']:
            change, direction = DataProcessor.calc_change(
                current_metrics[metric],
                previous_metrics[metric]
            )
            metrics_changes[metric] = (change, direction)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –¥–∏–Ω–∞–º–∏–∫—É
        overall_trend = DataProcessor._get_overall_trend(metrics_changes)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞
        period_headers = {
            'daily': 'üìâ  –î–Ω–µ–≤–∫–∞',
            'weekly': 'üìâ  –ù–µ–¥–µ–ª—å–∫–∞',
            'monthly': 'üìâ  –ú–µ—Å—è—Ü'
        }
        period_header = period_headers.get(period_type, 'üìä –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–∏–æ–¥–∞')

        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
        trend_emoji = "ü¶ç" if "–†–æ—Å—Ç" in overall_trend else "üí©"
        trend_text = "–ª–∏–¥ –ø–æ–¥–µ—à–µ–≤–µ–ª" if "–†–æ—Å—Ç" in overall_trend else "–ª–∏–¥ –ø–æ–¥–æ—Ä–æ–∂–∞–ª"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        def format_date(date: datetime) -> str:
            return f"{date.day:02d}/{date.month:02d}"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞
        if period_type == 'daily':
            # –î–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏
            date_str = f"{format_date(previous_start)} vs {format_date(current_start)}"
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            date_str = f"{format_date(previous_start)}-{format_date(previous_end)} vs {format_date(current_start)}-{format_date(current_end)}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = [
            f"{period_header}: {trend_text} {trend_emoji}",
            f"{date_str}\n",
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        message.extend([
            f"–ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {previous_metrics['conversions']:.1f} ‚Üí {current_metrics['conversions']:.1f} {metrics_changes['conversions'][1]} {metrics_changes['conversions'][0]:.1f}%",
            f"–¶–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: ${previous_metrics['conversion_cost']:.2f} ‚Üí ${current_metrics['conversion_cost']:.2f} {metrics_changes['conversion_cost'][1]} {metrics_changes['conversion_cost'][0]:.1f}%",
            f"–†–∞—Å—Ö–æ–¥: ${previous_metrics['spend']:.2f} ‚Üí ${current_metrics['spend']:.2f} {metrics_changes['spend'][1]} {metrics_changes['spend'][0]:.1f}%"
        ])
        
        return "\n".join(message)
    
    @staticmethod
    def truncate_for_telegram(text: str, max_length: int = 4000) -> List[str]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º HTML-—Ä–∞–∑–º–µ—Ç–∫–∏.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
        """
        if len(text) <= max_length:
            return [text]
        
        parts = []
        current_part = ""
        current_tags = []  # –°—Ç–µ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö HTML —Ç–µ–≥–æ–≤
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = text.split('\n')
        
        for line in lines:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å—Ç–µ–∫
            if '<b>' in line:
                current_tags.append('<b>')
            if '<i>' in line:
                current_tags.append('<i>')
            if '<code>' in line:
                current_tags.append('<code>')
                
            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
            if len(current_part + line + '\n') > max_length:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
                for tag in reversed(current_tags):
                    if tag == '<b>':
                        current_part += '</b>'
                    elif tag == '<i>':
                        current_part += '</i>'
                    elif tag == '<code>':
                        current_part += '</code>'
                
                # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                parts.append(current_part)
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å, –æ—Ç–∫—Ä—ã–≤–∞—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–µ–≥–∏
                current_part = ""
                for tag in current_tags:
                    current_part += tag
                    
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
            current_part += line + '\n'
            
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å—Ç–µ–∫–∞
            if '</b>' in line:
                current_tags.remove('<b>')
            if '</i>' in line:
                current_tags.remove('<i>')
            if '</code>' in line:
                current_tags.remove('<code>')
                
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            parts.append(current_part)
        
        return parts
    
    @staticmethod
    def convert_to_dataframe(data: List[Dict], 
                             level: str = 'campaign', 
                             date_field: str = 'date_start') -> pd.DataFrame:
        """
        Convert API data to a pandas DataFrame.
        
        Args:
            data: List of data dictionaries.
            level: The level of data (account, campaign, adset, ad).
            date_field: The name of the date field.
            
        Returns:
            A pandas DataFrame.
        """
        if not data:
            return pd.DataFrame()
        
        # Create DataFrame
        df = pd.DataFrame(data)
        
        # Convert date if present
        if date_field in df.columns:
            try:
                df[date_field] = pd.to_datetime(df[date_field])
            except Exception as e:
                logger.warning(f"Failed to convert dates: {str(e)}")
        
        return df 

    @staticmethod
    def calc_change(current_value: float, previous_value: float) -> Tuple[float, str]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
        
        Args:
            current_value: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            previous_value: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ –∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–∏–º–≤–æ–ª–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (‚Üë –∏–ª–∏ ‚Üì)
        """
        if previous_value == 0:
            if current_value == 0:
                return 0.0, "="
            return 100.0, "‚Üë"
            
        change = ((current_value - previous_value) / previous_value) * 100
        direction = "‚Üë" if change >= 0 else "‚Üì"
        
        return abs(change), direction 