"""
Common handlers for the Telegram bot.
Basic commands like start, help, menu, etc.
"""
import logging
from typing import Dict, Any, List, Union, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import TelegramBadRequest

from src.bot.keyboards import build_main_menu_keyboard

# Create a router for common handlers
router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    Handle the /start command.
    
    Args:
        message: The message object.
    """
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Facebook Ads.\n\n"
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö, "
        "–∫–∞–º–ø–∞–Ω–∏—è—Ö –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /auth.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        parse_mode="HTML"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """
    Handle the /help command.
    
    Args:
        message: The message object.
    """
    await message.answer(
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Facebook\n"
        "/accounts - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "/campaigns [id_–∞–∫–∫–∞—É–Ω—Ç–∞] - –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        "/ads [id_–∫–∞–º–ø–∞–Ω–∏–∏] - –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏\n"
        "/stats [id_–æ–±—ä–µ–∫—Ç–∞] [–ø–µ—Ä–∏–æ–¥] - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
        parse_mode="HTML"
    )

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    """
    Handle the /menu command.
    
    Args:
        message: The message object.
    """
    await message.answer(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        parse_mode="HTML",
        reply_markup=build_main_menu_keyboard()
    )

@router.callback_query(F.data.startswith("back:"))
async def process_back_callback(callback: CallbackQuery):
    """
    Handle back button callback.
    
    Args:
        callback: The callback query.
    """
    back_data = callback.data.split(':')
    back_type = back_data[1]
    
    try:
        await callback.answer()
    except Exception as e:
        logger.warning(f"Error answering callback: {str(e)}")
        # Continue even if we can't answer the callback
        pass
    
    # First try to delete the current message to avoid cluttering the chat
    try:
        await callback.message.delete()
    except TelegramBadRequest as e:
        logger.warning(f"Could not delete message when going back: {str(e)}")
        # If we can't delete, we'll just edit the text later
        pass
    
    if back_type == "accounts":
        # Go back to accounts list
        from src.bot.account_handlers import cmd_accounts
        await cmd_accounts(callback.message)
    elif back_type == "campaign" and len(back_data) > 2:
        # Go back to campaign's ads
        campaign_id = back_data[2]
        
        # Create a fake command object
        class FakeCommandObject:
            def __init__(self, args):
                self.args = args
        
        from src.bot.ad_handlers import cmd_ads
        await cmd_ads(callback.message, FakeCommandObject(campaign_id))
    elif back_type == "account" and len(back_data) > 2:
        # Go back to account's campaigns
        account_id = back_data[2]
        
        # Create a fake command object
        class FakeCommandObject:
            def __init__(self, args):
                self.args = args
        
        from src.bot.campaign_handlers import cmd_campaigns
        await cmd_campaigns(callback.message, FakeCommandObject(account_id))
    elif back_type == "cancel":
        # We already tried to delete the message above, but if that failed, edit it
        try:
            await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await callback.message.edit_reply_markup(None)
        except Exception as e:
            logger.warning(f"Could not edit message when canceling: {str(e)}") 