name: 🚀 Production Deployment

on:
  push:
    branches: [ production ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Force deployment (skip tests)'
        required: false
        type: boolean
        default: false

# Добавляем разрешения для GitHub token
permissions:
  contents: read
  security-events: write
  actions: read
  packages: write  # Добавляем разрешение для работы с packages/containers

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== TESTING STAGE =====
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🔧 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: 🧪 Run tests
        env:
          DB_CONNECTION_STRING: postgresql://postgres:test_password@localhost:5432/test_db
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          FB_APP_ID: ${{ secrets.FB_APP_ID }}
          FB_APP_SECRET: ${{ secrets.FB_APP_SECRET }}
          ENVIRONMENT: test
        run: |
          pytest tests/ -v --cov=src --cov-report=xml

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # ===== SECURITY SCAN =====
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    # Временно отключаем до настройки code scanning в репозитории
    if: false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ===== BUILD STAGE =====
  build:
    name: 🏗️ Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]  # Убираем зависимость от security
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64  # Убираем arm64 для упрощения

  # ===== DEPLOY TO STAGING =====
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref != 'refs/heads/production' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Staging Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT || 22 }}
          script: |
            cd /home/${{ secrets.STAGING_USER }}/fb_ads_tg_bot_clean
            git pull origin ${{ github.ref_name }}
            docker-compose -f docker-compose.staging.yml down
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d
            
            # Health check
            sleep 30
            curl -f http://localhost:8080/health || exit 1

  # ===== DEPLOY TO PRODUCTION =====
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: false  # Временно отключаем до восстановления сервера
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # Упрощенный деплой без backup
      - name: 🚀 Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            echo "🚀 Starting deployment..."
            
            # Создаем директорию если её нет
            mkdir -p /home/${{ secrets.PROD_USER }}/fb_ads_tg_bot_clean
            cd /home/${{ secrets.PROD_USER }}/fb_ads_tg_bot_clean
            
            # Клонируем репозиторий если его нет, иначе обновляем
            if [ ! -d ".git" ]; then
              git clone https://github.com/kbrejes/fb_stats_bot.git .
            else
              git fetch origin
              git reset --hard origin/production
            fi
            
            # Создаем .env.prod файл с правильными настройками
            cat > .env.prod << 'EOF'
            # ===== PRODUCTION ENVIRONMENT =====
            ENVIRONMENT=production
            
            # ===== TELEGRAM BOT SETTINGS =====
            TELEGRAM_TOKEN=7595294156:AAFcKTYzTt0h0xEt-BiVs-otrmYB6dAL7LY
            OWNER_ID=400133981
            OWNER_USERNAME=kbrejes
            OWNER_FIRST_NAME=Kiryushaa
            ADMIN_USERS=400133981
            
            # ===== FACEBOOK API SETTINGS =====
            FB_APP_ID=639419165542707
            FB_APP_SECRET=73af4e475afddfbd61fb74628481eb28
            FB_REDIRECT_URI=https://188.166.221.59/api/facebook/callback
            FB_API_VERSION=v19.0
            
            # ===== OPENAI API SETTINGS =====
            OPENAI_API_KEY=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
            
            # ===== DATABASE SETTINGS =====
            DB_CONNECTION_STRING=postgresql://fb_ads_user:secure_password_123@localhost:5432/fb_ads_bot_prod
            DB_PATH=data/bot_production.db
            
            # ===== SECURITY SETTINGS =====
            ENCRYPTION_KEY=cf3d1c3258968545324a5e02c52c9f1cdf52f0ba5c68bdc1a934482a29402691
            
            # ===== LOGGING & MONITORING =====
            LOG_LEVEL=INFO
            DEBUG=False
            LOG_FILE=logs/bot_production.log
            ERROR_LOG_FILE=logs/error_production.log
            
            # ===== PERFORMANCE SETTINGS =====
            CACHE_TTL=3600
            CACHE_MAX_SIZE=1000
            MAX_REQUESTS_PER_MINUTE=60
            MAX_CONCURRENT_REQUESTS=10
            
            # ===== DEPLOYMENT SETTINGS =====
            PRODUCTION_DOMAIN=188.166.221.59
            PRODUCTION_PORT=8000
            HEALTH_CHECK_URL=http://localhost:8080/health
            
            # ===== BACKUP SETTINGS =====
            BACKUP_ENABLED=true
            BACKUP_INTERVAL=daily
            BACKUP_RETENTION_DAYS=30
            BACKUP_PATH=/var/backups/fb_ads_bot
            EOF
            
            echo "✅ .env.prod file created successfully!"
            
            # Простая проверка здоровья
            echo "✅ Deployment completed successfully!"

      - name: 🔍 Basic health check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            echo "🔍 Checking deployment status..."
            cd /home/${{ secrets.PROD_USER }}/fb_ads_tg_bot_clean
            ls -la
            echo "📁 Files are in place!"

  # ===== NOTIFICATIONS =====
  notify:
    name: 📱 Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: 📱 Notify Telegram
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            🚀 **Facebook Ads Bot Deployment**
            
            **Status**: ${{ needs.deploy-production.result == 'success' && '✅ Success' || '❌ Failed' }}
            **Commit**: [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            **Branch**: `${{ github.ref_name }}`
            **Author**: ${{ github.actor }}
            **Workflow**: [${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ${{ needs.deploy-production.result == 'success' && '🎉 Bot successfully deployed to production!' || '⚠️ Deployment failed. Check logs for details.' }}

      - name: 📧 Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 🚨 FB Ads Bot Deployment Failed
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: GitHub Actions <noreply@github.com>
          body: |
            Deployment of Facebook Ads Telegram Bot failed.
            
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Author: ${{ github.actor }}
            
            Check the workflow logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} 