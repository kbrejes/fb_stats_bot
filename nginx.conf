events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=5r/s;

    # Upstream for the bot application
    upstream bot_app {
        server bot:8000;
        keepalive 32;
    }

    # Upstream for health checks
    upstream health_check {
        server bot:8080;
    }

    # HTTP redirect to HTTPS
    server {
        listen 80;
        server_name 188.166.221.59;  # Замените на ваш домен
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name 188.166.221.59;  # Замените на ваш домен

        # SSL configuration
        ssl_certificate /etc/ssl/certs/bot.crt;
        ssl_certificate_key /etc/ssl/certs/bot.key;
        
        # SSL security settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Main application
        location / {
            proxy_pass http://bot_app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Facebook webhook endpoint (с rate limiting)
        location /api/facebook/callback {
            limit_req zone=webhook burst=5 nodelay;
            
            proxy_pass http://bot_app/api/facebook/callback;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Специальные настройки для webhook
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Логирование webhook запросов
            access_log /var/log/nginx/webhook.log main;
        }

        # Health check endpoints
        location /health {
            proxy_pass http://health_check/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            
            # Отключаем логирование для health checks
            access_log off;
        }

        location /health/detailed {
            proxy_pass http://health_check/health/detailed;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        # Prometheus metrics endpoint
        location /metrics {
            proxy_pass http://health_check/metrics;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            
            # Ограничиваем доступ только к localhost/internal
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker networks
            deny all;
        }

        # Static files (если будут)
        location /static/ {
            alias /app/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Favicon
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            return 204;
        }

        # Robots.txt
        location = /robots.txt {
            access_log off;
            log_not_found off;
            return 200 "User-agent: *\nDisallow: /\n";
            add_header Content-Type text/plain;
        }
    }

    # Monitoring endpoints server (internal only)
    server {
        listen 9000;
        server_name 188.166.221.59;

        # Restrict access to internal networks only
        allow 127.0.0.1;
        allow 172.16.0.0/12;  # Docker networks
        deny all;

        # Prometheus metrics
        location /metrics {
            proxy_pass http://health_check/metrics;
        }

        # Detailed health check
        location /health {
            proxy_pass http://health_check/health/detailed;
        }

        # Nginx status
        location /nginx_status {
            stub_status on;
        }
    }
} 